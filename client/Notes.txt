1. npx create-expo-app Expiry_Tracker --template blank
2. add babel.config.js
3. npm install nativewind tailwindcss
4. npx tailwindcss init
5. npx expo install expo-router expo-status-bar react-native-safe-area-context react-native-screens expo-linking expo-constants 
6. npm install nativewind@2.0.11
7. npm install --save-dev tailwindcss@3.3.2
8. set  "main": "expo-router/entry", in package.json


Expo App opening
ipconfig
setx /M REACT_NATIVE_PACKAGER_HOSTNAME 192.168.0.109

start expo app with command -> {first it get's the current connected ipv4 address and sets it to environment variables and the updates the .env file}

./start-expo.ps1   

RFID API key : n9puh5KB51whXFqK
RFID URL :  https://gs1-eu1-pd-rfidcoder-app.azurewebsites.net/api/tag/epc/30F4257BF46DB64000000190?apikey=n9puh5KB51whXFqK


eas build --profile development --platform android
first SHA1 : 87:B4:2D:59:B5:78:3A:F5:C3:71:74:29:00:0F:51:78:C8:AC:CC:14
second SHA2 : 9B:EC:83:0F:46:A1:B3:AD:AC:58:D4:07:C7:8B:B1:61:3D:FA:58:91

eas build --clear-cache --profile development --platform android




// import { extractExpiryDate } from "../utils/helper";
import * as FileSystem from "expo-file-system"; // For reading image files
import { GoogleGenerativeAI } from "@google/generative-ai"; // Google Gemini API
export const extractExpiryDate = async (imageUri) => {
  try {
    const base64Image = await FileSystem.readAsStringAsync(imageUri, {
      encoding: FileSystem.EncodingType.Base64,
    });

    const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });

    const response = await model.generateContent({
      contents: [
        {
          role: "user",
          parts: [
            { text: "Extract expiry date from the image" },
            { inlineData: { data: base64Image, mimeType: "image/png" } },
          ],
        },
      ],
    });

    const text = response.response.text();
    console.log("Extracted Expiry Date Raw:", text);

    const datePatterns = [
      /\b(\d{1,2})[\/\s-](\d{1,2})[\/\s-](\d{4})\b/,
      /\b(\d{1,2})[\/\s-](\d{4})\b/,
    ];

    let extractedDate = null;

    for (const pattern of datePatterns) {
      const match = text.match(pattern);
      if (match) {
        if (match.length === 4) {
          extractedDate = new Date(`${match[3]}-${match[2]}-${match[1]}`);
        } else if (match.length === 3) {
          extractedDate = new Date(`${match[2]}-${match[1]}-15`);
        }
        break;
      }
    }

    if (!extractedDate) return "Not found";

    const formattedDate = `${extractedDate.getDate()}/${
      extractedDate.getMonth() + 1
    }/${extractedDate.getFullYear()}`;
    console.log("Formatted Expiry Date:", formattedDate);

    return formattedDate;
  } catch (error) {
    // console.error("Error extracting expiry date:", error);
    return "Failed to extract expiry date.";
  }
};


const API_KEY = GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(API_KEY);